<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>Panel de Estado de ESP32</title>
  <style>
    body { font-family: Arial, sans-serif; margin: 20px; }
    table { border-collapse: collapse; width: 100%; margin-bottom: 20px; }
    table, th, td { border: 1px solid #ccc; }
    th, td { padding: 8px; text-align: left; }
    .online { color: green; font-weight: bold; }
    .offline { color: red; font-weight: bold; }
    #logs { border: 1px solid #ccc; padding: 10px; height: 300px; overflow-y: scroll; background: #f0f0f0; }
  </style>
</head>
<body>
  <h1>Estado de Dispositivos ESP32</h1>
  <table>
    <thead>
      <tr>
        <th>MAC</th>
        <th>Nombre</th>
        <th>Estado</th>
        <th>Versión</th>
        <th>Último Visto</th>
        <th>Salud</th>
      </tr>
    </thead>
    <tbody id="devicesTable">
      <% for (let mac in devices) { %>
        <tr id="device-<%= mac %>">
          <td><%= mac %></td>
          <td><%= devices[mac].name %></td>
          <td class="<%= devices[mac].status === 'online' ? 'online' : 'offline' %>"><%= devices[mac].status %></td>
          <td><%= devices[mac].version %></td>
          <td>
            <% if (devices[mac].lastSeen) { %>
              <%= new Date(devices[mac].lastSeen).toLocaleString('es-AR') %>
            <% } %>
          </td>
          <td><%= devices[mac].health %></td>
        </tr>
      <% } %>
    </tbody>
  </table>

  <h2>Logs de Depuración</h2>
  <div id="logs">
    <% logs.forEach(function(log) { %>
      <p><%= log %></p>
    <% }) %>
  </div>

  <!-- Incluir Socket.IO -->
  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();
    const devicesTable = document.getElementById('devicesTable');
    const logsDiv = document.getElementById('logs');

    // Actualizar la tabla de dispositivos al recibir nuevos datos
    socket.on('devices', function(devices) {
      devicesTable.innerHTML = "";
      for (let mac in devices) {
        const device = devices[mac];
        const row = document.createElement('tr');
        row.id = 'device-' + mac;
        row.innerHTML = `
          <td>${mac}</td>
          <td>${device.name || ""}</td>
          <td class="${device.status === 'online' ? 'online' : 'offline'}">${device.status}</td>
          <td>${device.version || ""}</td>
          <td>${device.lastSeen ? new Date(device.lastSeen).toLocaleString('es-AR') : ""}</td>
          <td>${device.health || ""}</td>
        `;
        devicesTable.appendChild(row);
      }
    });

    // Agregar nuevos logs conforme se reciben
    socket.on('log', function(message) {
      const p = document.createElement('p');
      p.textContent = message;
      logsDiv.appendChild(p);
      logsDiv.scrollTop = logsDiv.scrollHeight;
    });

    // Al conectar, enviar los logs actuales
    socket.on('logs', function(logs) {
      logsDiv.innerHTML = "";
      logs.forEach(function(log) {
        const p = document.createElement('p');
        p.textContent = log;
        logsDiv.appendChild(p);
      });
    });
  </script>
</body>
</html>
