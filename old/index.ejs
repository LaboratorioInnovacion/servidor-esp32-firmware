<!-- views/index.ejs -->
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>ESP32 - Programación Remota</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      max-width: 800px;
      margin: 0 auto;
      padding: 20px;
      background-color: #f5f5f5;
    }
    .container {
      border: 1px solid #ddd;
      border-radius: 8px;
      padding: 20px;
      margin-bottom: 20px;
      background-color: white;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .form-group {
      margin-bottom: 15px;
    }
    label {
      display: block;
      margin-bottom: 5px;
      font-weight: bold;
    }
    input, button {
      padding: 8px;
      border-radius: 4px;
    }
    input[type="file"] {
      width: 100%;
      max-width: 400px;
    }
    input[type="text"] {
      width: 100%;
      max-width: 300px;
      border: 1px solid #ccc;
    }
    button {
      background-color: #4CAF50;
      color: white;
      border: none;
      cursor: pointer;
      padding: 10px 15px;
      font-weight: bold;
    }
    button:hover {
      background-color: #45a049;
    }
    button:disabled {
      background-color: #cccccc;
      cursor: not-allowed;
    }
    #status {
      margin-top: 20px;
      padding: 10px;
      border-radius: 4px;
    }
    .success {
      background-color: #d4edda;
      color: #155724;
    }
    .error {
      background-color: #f8d7da;
      color: #721c24;
    }
    .info {
      background-color: #e2f3fd;
      color: #0c5460;
    }
    .progress {
      background-color: #e9ecef;
      height: 20px;
      border-radius: 4px;
      margin-top: 10px;
    }
    .progress-bar {
      height: 100%;
      background-color: #4CAF50;
      border-radius: 4px;
      transition: width 0.3s;
      color: white;
      text-align: center;
      line-height: 20px;
      font-size: 12px;
    }
    .device-status {
      display: flex;
      justify-content: space-between;
      padding: 10px;
      background-color: #f0f0f0;
      border-radius: 4px;
      margin-bottom: 10px;
    }
    .device-status span {
      font-weight: bold;
    }
    .status-log {
      height: 200px;
      overflow-y: auto;
      border: 1px solid #ddd;
      padding: 10px;
      background-color: #f8f9fa;
      border-radius: 4px;
      font-family: monospace;
    }
    .status-entry {
      margin-bottom: 5px;
      padding-bottom: 5px;
      border-bottom: 1px solid #eee;
    }
    .status-time {
      color: #666;
      font-size: 0.8em;
    }
    h1, h2 {
      color: #333;
    }
    header {
      text-align: center;
      margin-bottom: 30px;
    }
  </style>
</head>
<body>
  <header>
    <h1>ESP32 - Programación Remota</h1>
    <p>Sistema de actualización OTA para dispositivos ESP32</p>
  </header>
  
  <div class="container">
    <h2>Subir Firmware</h2>
    <form id="uploadForm" enctype="multipart/form-data">
      <div class="form-group">
        <label for="firmware">Archivo de Firmware (.bin):</label>
        <input type="file" id="firmware" name="firmware" accept=".bin" required>
      </div>
      <button type="submit">Subir Firmware</button>
    </form>
  </div>
  
  <div class="container">
    <h2>Enviar a Dispositivo</h2>
    <div class="form-group">
      <label for="deviceId">ID del Dispositivo:</label>
      <input type="text" id="deviceId" placeholder="esp32-001" required>
    </div>
    <button id="deployBtn" disabled>Enviar Firmware</button>
    
    <div class="progress" style="display: none;">
      <div class="progress-bar" style="width: 0%">0%</div>
    </div>
  </div>
  
  <div class="container">
    <h2>Estado de Dispositivos</h2>
    <div id="devices-container">
      <% if (Object.keys(deviceStatus).length === 0) { %>
        <p>No hay dispositivos conectados.</p>
      <% } else { %>
        <% Object.keys(deviceStatus).forEach(function(deviceId) { %>
          <div class="device-status">
            <div>
              <span><%= deviceId %></span>
              <p>Estado: <%= deviceStatus[deviceId].status %></p>
            </div>
            <div>
              <p>Última actualización: <%= deviceStatus[deviceId].lastSeen.toLocaleString() %></p>
            </div>
          </div>
        <% }); %>
      <% } %>
    </div>
  </div>
  
  <div class="container">
    <h2>Registro de Actividad</h2>
    <div class="status-log" id="status-log">
      <% statusMessages.forEach(function(entry) { %>
        <div class="status-entry">
          <span class="status-time">[<%= entry.time %>]</span>
          <%= entry.message %>
        </div>
      <% }); %>
    </div>
  </div>
  
  <div id="status" style="display: none;"></div>
  
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const uploadForm = document.getElementById('uploadForm');
      const deployBtn = document.getElementById('deployBtn');
      const statusDiv = document.getElementById('status');
      const progressBar = document.querySelector('.progress-bar');
      const progressContainer = document.querySelector('.progress');
      
      // Manejar subida de firmware
      uploadForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const formData = new FormData(uploadForm);
        setStatus('Subiendo firmware...', 'info');
        
        try {
          const response = await fetch('/upload', {
            method: 'POST',
            body: formData
          });
          
          const result = await response.json();
          
          if (result.success) {
            setStatus('Firmware subido correctamente. Ahora puedes enviarlo a un dispositivo.', 'success');
            deployBtn.disabled = false;
          } else {
            setStatus('Error: ' + result.error, 'error');
          }
          
          // Actualizar el registro de actividad
          refreshStatusLog();
        } catch (error) {
          setStatus('Error al subir el firmware: ' + error.message, 'error');
        }
      });
      
      // Manejar despliegue a dispositivo
      deployBtn.addEventListener('click', async function() {
        const deviceId = document.getElementById('deviceId').value.trim();