<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>FIRMWAVE - Panel de Control</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <style>
    .glass-panel {
      background: rgba(255, 255, 255, 0.8);
      backdrop-filter: blur(10px);
      border-radius: 12px;
      border: 1px solid rgba(255, 255, 255, 0.3);
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
      margin-bottom: 24px;
    }

    .device-status-online {
      background-color: rgba(34, 197, 94, 0.2);
      color: rgb(34, 197, 94);
      border: 1px solid rgba(34, 197, 94, 0.3);
      padding: 4px 12px;
      border-radius: 999px;
      font-size: 0.75rem;
      font-weight: 500;
      text-transform: capitalize;
      animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
    }

    .device-status-offline {
      background-color: rgba(239, 68, 68, 0.2);
      color: rgb(239, 68, 68);
      border: 1px solid rgba(239, 68, 68, 0.3);
      padding: 4px 12px;
      border-radius: 999px;
      font-size: 0.75rem;
      font-weight: 500;
      text-transform: capitalize;
    }

    @keyframes pulse {

      0%,
      100% {
        opacity: 1;
      }

      50% {
        opacity: 0.5;
      }
    }

    @keyframes float {
      0% {
        transform: translateY(0px);
      }

      50% {
        transform: translateY(-5px);
      }

      100% {
        transform: translateY(0px);
      }
    }

    .animate-float {
      animation: float 3s ease-in-out infinite;
    }

    .log-entry {
      font-family: monospace;
      margin-bottom: 4px;
      font-size: 0.75rem;
    }

    .section-header {
      display: flex;
      align-items: center;
      gap: 8px;
      margin-bottom: 16px;
    }

    .form-container {
      padding: 24px;
      border-radius: 12px;
      background-color: white;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
    }
  </style>
</head>

<body class="min-h-screen bg-gradient-to-b from-gray-50 to-gray-100">
  <div class="max-w-7xl mx-auto px-4 py-6">
    <!-- Header -->
    <header class="w-full py-6">
      <div class="flex items-center justify-center md:justify-start">
        <div class="flex items-center gap-3">
          <div class="relative">
            <!-- Activity Icon -->
            <svg xmlns="http://www.w3.org/2000/svg" class="text-purple-600 animate-float h-8 w-8" width="24" height="24"
              viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
              stroke-linejoin="round">
              <polyline points="22 12 18 12 15 21 9 3 6 12 2 12"></polyline>
            </svg>
            <div class="absolute -top-1 -right-1 w-3 h-3 bg-green-500 rounded-full border-2 border-white"></div>
          </div>
          <div>
            <h1 class="text-2xl font-light tracking-tight">
              <span class="font-semibold">FIRM</span>WAVE
            </h1>
            <p class="text-xs text-gray-500">
              Panel de Control
            </p>
          </div>
        </div>
      </div>
    </header>

    <!-- Device Table -->
    <div class="glass-panel overflow-hidden">
      <div class="section-header p-6 pb-2">
        <!-- Activity Icon -->
        <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 text-purple-600" width="24" height="24"
          viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
          stroke-linejoin="round">
          <polyline points="22 12 18 12 15 21 9 3 6 12 2 12"></polyline>
        </svg>
        <h2 class="text-xl">Estado de Dispositivos</h2>
      </div>

      <div class="overflow-x-auto">
        <table class="w-full">
          <thead>
            <tr class="border-b border-gray-200 bg-gray-50">
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">MAC</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nombre</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Estado</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Versión</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Último Visto
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Salud</th>
            </tr>
          </thead>
          <tbody id="devicesTable">
            <% if (Object.keys(devices).length===0) { %>
              <tr>
                <td colspan="6" class="px-6 py-12 text-center">
                  <div class="flex flex-col items-center justify-center text-gray-500">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 mb-2 opacity-20" width="24" height="24"
                      viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                      stroke-linejoin="round">
                      <polyline points="22 12 18 12 15 21 9 3 6 12 2 12"></polyline>
                    </svg>
                    <p>No hay dispositivos conectados</p>
                    <p class="text-sm">Esperando a que los dispositivos ESP32 se conecten...</p>
                  </div>
                </td>
              </tr>
              <% } else { %>
                <% devices.forEach(function(device) { %>
                  <tr class="border-b border-gray-200 hover:bg-gray-50">
                    <td class="px-6 py-4 font-mono text-xs">
                      <%= device.mac %>
                    </td>
                    <td class="px-6 py-4 font-medium">
                      <%= device.name || "Dispositivo Sin Nombre" %>
                    </td>
                    <td class="px-6 py-4">
                      <span
                        class="<%= device.status === 'online' ? 'device-status-online' : 'device-status-offline' %>">
                        <%= device.status %>
                      </span>
                    </td>
                    <td class="px-6 py-4">
                      <div class="flex items-center gap-2">
                        <svg xmlns="http://www.w3.org/2000/svg" class="text-gray-500 h-4 w-4" width="24" height="24"
                          viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                          stroke-linejoin="round">
                          <rect x="4" y="4" width="16" height="16" rx="2" ry="2"></rect>
                          <rect x="9" y="9" width="6" height="6"></rect>
                        </svg>
                        <span class="text-sm">
                          <%= device.version || "Desconocida" %>
                        </span>
                      </div>
                    </td>
                    <td class="px-6 py-4">
                      <div class="flex items-center gap-2">
                        <svg xmlns="http://www.w3.org/2000/svg" class="text-gray-500 h-4 w-4" width="24" height="24"
                          viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                          stroke-linejoin="round">
                          <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                        </svg>
                        <span class="text-sm">
                          <%= device.lastSeen ? new Date(device.lastSeen).toLocaleString('es') : "Nunca" %>
                        </span>
                      </div>
                    </td>
                    <td class="px-6 py-4">
                      <div class="flex items-center gap-2">
                        <svg xmlns="http://www.w3.org/2000/svg" class="<%= 
                            device.health === 'OK' ? 'text-green-500' : 
                            device.health === 'NO RESPONDE' ? 'text-red-500' : 
                            'text-gray-500'
                          %> h-4 w-4" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor"
                          stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                          <path
                            d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z">
                          </path>
                        </svg>
                        <span class="text-sm">
                          <%= device.health || "Desconocida" %>
                        </span>
                      </div>
                    </td>
                  </tr>
                  <% }); %>

                    <% } %>
          </tbody>
        </table>
      </div>
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
      <!-- Firmware Update -->
      <div class="form-container">
        <div class="section-header">
          <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 text-purple-600" width="24" height="24"
            viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
            stroke-linejoin="round">
            <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
            <polyline points="17 8 12 3 7 8"></polyline>
            <line x1="12" y1="3" x2="12" y2="15"></line>
          </svg>
          <h2 class="text-xl">Actualización de Firmware</h2>
        </div>

        <form id="firmwareForm" class="space-y-6" enctype="multipart/form-data">
          <div class="space-y-2">
            <label for="deviceSelect" class="block text-sm font-medium text-gray-700">Dispositivo Objetivo</label>
            <select id="deviceSelect" name="deviceId"
              class="w-full rounded-md border border-gray-300 py-2 px-3 bg-white shadow-sm focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500">
              <option value="all">Todos los Dispositivos</option>
              <% Object.entries(devices).forEach(function([mac, device]) { %>
                <option value="<%= mac %>">
                  <%= mac %> - <%= device.name || "Dispositivo Sin Nombre" %>
                </option>
                <% }); %>
            </select>
            <p class="text-xs text-gray-500 mt-1" id="updateHint">
              La actualización se aplicará a todos los dispositivos en línea. Los dispositivos fuera de línea se
              actualizarán cuando se vuelvan a conectar.
            </p>
          </div>

          <div class="space-y-2">
            <label for="firmwareFile" class="block text-sm font-medium text-gray-700">Archivo de Firmware (.bin)</label>
            <div class="border border-gray-300 rounded-md p-4 focus-within:ring-1 focus-within:ring-purple-500">
              <input id="firmwareFile" name="firmware" type="file" accept=".bin" required class="hidden" />
              <label for="firmwareFile" class="flex flex-col items-center justify-center gap-2 cursor-pointer"
                id="fileDropArea">
                <div class="h-16 w-16 rounded-full bg-gray-100 flex items-center justify-center">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-500" width="24" height="24"
                    viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                    stroke-linejoin="round">
                    <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                    <polyline points="17 8 12 3 7 8"></polyline>
                    <line x1="12" y1="3" x2="12" y2="15"></line>
                  </svg>
                </div>
                <span class="text-sm font-medium">
                  Arrastra y suelta o haz clic para seleccionar
                </span>
                <span class="text-xs text-gray-500">
                  Solo se admiten archivos .bin
                </span>
              </label>
              <div id="selectedFileInfo" class="hidden flex flex-col items-center mt-2">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-green-500" width="24" height="24"
                  viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                  stroke-linejoin="round">
                  <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                  <polyline points="22 4 12 14.01 9 11.01"></polyline>
                </svg>
                <span class="text-sm font-medium" id="fileName"></span>
                <span class="text-xs text-gray-500" id="fileSize"></span>
              </div>
            </div>
          </div>

          <div class="flex justify-end">
            <button type="submit" id="updateButton"
              class="px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition-all duration-300">
              <svg xmlns="http://www.w3.org/2000/svg" class="mr-2 h-4 w-4 inline" width="24" height="24"
                viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                stroke-linejoin="round">
                <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                <polyline points="17 8 12 3 7 8"></polyline>
                <line x1="12" y1="3" x2="12" y2="15"></line>
              </svg>
              Actualizar Firmware
            </button>
            <div id="uploadingIndicator" class="hidden items-center px-4 py-2">
              <span class="mr-2">Actualizando...</span>
              <div class="h-4 w-4 rounded-full border-2 border-purple-600 border-t-transparent animate-spin"></div>
            </div>
          </div>
        </form>
      </div>

      <!-- Logs Panel -->
      <div class="glass-panel">
        <div class="p-4 flex items-center justify-between border-b border-gray-200">
          <div class="flex items-center gap-2">
            <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 text-purple-600" width="24" height="24"
              viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
              stroke-linejoin="round">
              <polyline points="4 17 10 11 4 5"></polyline>
              <line x1="12" y1="19" x2="20" y2="19"></line>
            </svg>
            <h2 class="text-xl">Logs de Depuración</h2>
          </div>
          <div class="flex gap-2">
            <button id="copyLogsBtn"
              class="h-8 px-2 text-xs border border-gray-300 rounded-md hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-3.5 w-3.5 mr-1 inline" width="24" height="24"
                viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                stroke-linejoin="round">
                <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
                <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
              </svg>
              Copiar
            </button>
            <button id="clearLogsBtn"
              class="h-8 px-2 text-xs border border-gray-300 rounded-md text-red-500 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-3.5 w-3.5 mr-1 inline" width="24" height="24"
                viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                stroke-linejoin="round">
                <polyline points="3 6 5 6 21 6"></polyline>
                <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
              </svg>
              Limpiar
            </button>
          </div>
        </div>
        <div id="logs" class="p-4 h-80 overflow-y-auto font-mono text-xs" style="scroll-behavior: smooth">
          <% if (logs.length===0) { %>
            <div class="h-full flex flex-col items-center justify-center text-gray-500">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10 mb-2 opacity-20" width="24" height="24"
                viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                stroke-linejoin="round">
                <polyline points="4 17 10 11 4 5"></polyline>
                <line x1="12" y1="19" x2="20" y2="19"></line>
              </svg>
              <p>No hay logs para mostrar</p>
              <p class="text-sm">Los logs de los dispositivos aparecerán aquí</p>
            </div>
            <% } else { %>
              <% logs.forEach(function(log) { %>
                <% let logClass="text-gray-800" ; if (log.toLowerCase().includes("error") ||
                  log.toLowerCase().includes("failed") || log.toLowerCase().includes("exception")) {
                  logClass="text-red-500" ; } else if (log.toLowerCase().includes("warning") ||
                  log.toLowerCase().includes("warn")) { logClass="text-yellow-500" ; } else if
                  (log.toLowerCase().includes("success") || log.toLowerCase().includes("connected")) {
                  logClass="text-green-500" ; } const timestamp=new Date().toLocaleTimeString(); %>
                  <div class="log-entry <%= logClass %>">
                    <span class="text-gray-500 mr-2">[<%= timestamp %>]</span>
                    <%= log %>
                  </div>
                  <% }); %>
                    <% } %>
        </div>
      </div>
    </div>
  </div>

  <!-- Socket.IO -->
  <script src="/socket.io/socket.io.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function () {
      const socket = io();
      const devicesTable = document.getElementById('devicesTable');
      const logsDiv = document.getElementById('logs');
      const firmwareForm = document.getElementById('firmwareForm');
      const firmwareFile = document.getElementById('firmwareFile');
      const fileDropArea = document.getElementById('fileDropArea');
      const selectedFileInfo = document.getElementById('selectedFileInfo');
      const fileName = document.getElementById('fileName');
      const fileSize = document.getElementById('fileSize');
      const updateButton = document.getElementById('updateButton');
      const uploadingIndicator = document.getElementById('uploadingIndicator');
      const deviceSelect = document.getElementById('deviceSelect');
      const updateHint = document.getElementById('updateHint');
      const copyLogsBtn = document.getElementById('copyLogsBtn');
      const clearLogsBtn = document.getElementById('clearLogsBtn');

      // Actualizar la tabla de dispositivos al recibir nuevos datos
      socket.on('devices', function (devices) {
        const tbody = document.createElement('tbody');
        tbody.id = 'devicesTable';

        if (Object.keys(devices).length === 0) {
          const row = document.createElement('tr');
          row.innerHTML = `
            <td colspan="6" class="px-6 py-12 text-center">
              <div class="flex flex-col items-center justify-center text-gray-500">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 mb-2 opacity-20" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <polyline points="22 12 18 12 15 21 9 3 6 12 2 12"></polyline>
                </svg>
                <p>No hay dispositivos conectados</p>
                <p class="text-sm">Esperando a que los dispositivos ESP32 se conecten...</p>
              </div>
            </td>
          `;
          tbody.appendChild(row);
        } else {
          for (let mac in devices) {
            const device = devices[mac];
            const row = document.createElement('tr');
            row.className = 'border-b border-gray-200 hover:bg-gray-50';
            row.innerHTML = `
              <td class="px-6 py-4 font-mono text-xs">${mac}</td>
              <td class="px-6 py-4 font-medium">
                <div class="flex items-center gap-2">
                  <svg xmlns="http://www.w3.org/2000/svg" class="${device.status === 'online' ? 'text-green-500' : 'text-red-500 opacity-50'} h-4 w-4" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M5 12.55a11 11 0 0 1 14.08 0"></path>
                    <path d="M1.42 9a16 16 0 0 1 21.16 0"></path>
                    <path d="M8.53 16.11a6 6 0 0 1 6.95 0"></path>
                    <line x1="12" y1="20" x2="12.01" y2="20"></line>
                  </svg>
                  ${device.name || "Dispositivo Sin Nombre"}
                </div>
              </td>
              <td class="px-6 py-4">
                <span class="${device.status === 'online' ? 'device-status-online' : 'device-status-offline'}">
                  ${device.status}
                </span>
              </td>
              <td class="px-6 py-4">
                <div class="flex items-center gap-2">
                  <svg xmlns="http://www.w3.org/2000/svg" class="text-gray-500 h-4 w-4" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <rect x="4" y="4" width="16" height="16" rx="2" ry="2"></rect>
                    <rect x="9" y="9" width="6" height="6"></rect>
                    <line x1="9" y1="1" x2="9" y2="4"></line>
                    <line x1="15" y1="1" x2="15" y2="4"></line>
                    <line x1="9" y1="20" x2="9" y2="23"></line>
                    <line x1="15" y1="20" x2="15" y2="23"></line>
                    <line x1="20" y1="9" x2="23" y2="9"></line>
                    <line x1="20" y1="14" x2="23" y2="14"></line>
                    <line x1="1" y1="9" x2="4" y2="9"></line>
                    <line x1="1" y1="14" x2="4" y2="14"></line>
                  </svg>
                  <span class="text-sm">${device.version || "Desconocida"}</span>
                </div>
              </td>
              <td class="px-6 py-4">
                <div class="flex items-center gap-2">
                  <svg xmlns="http://www.w3.org/2000/svg" class="text-gray-500 h-4 w-4" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                    <line x1="16" y1="2" x2="16" y2="6"></line>
                    <line x1="8" y1="2" x2="8" y2="6"></line>
                    <line x1="3" y1="10" x2="21" y2="10"></line>
                  </svg>
                  <span class="text-sm">${device.lastSeen ? new Date(device.lastSeen).toLocaleString('es') : "Nunca"}</span>
                </div>
              </td>
              <td class="px-6 py-4">
                <div class="flex items-center gap-2">
                  <svg xmlns="http://www.w3.org/2000/svg" 
                    class="${device.health === 'Good' ? 'text-green-500' :
                device.health === 'Fair' ? 'text-yellow-500' :
                  'text-red-500'
              } h-4 w-4" 
                    width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"></path>
                  </svg>
                  <span class="text-sm">${device.health || "Desconocida"}</span>
                </div>
              </td>
            `;
            tbody.appendChild(row);
          }
        }

        // Actualizar el selector de dispositivos también
        deviceSelect.innerHTML = '<option value="all">Todos los Dispositivos</option>';
        for (let mac in devices) {
          const device = devices[mac];
          const option = document.createElement('option');
          option.value = mac;
          option.textContent = `${mac} - ${device.name || "Dispositivo Sin Nombre"}`;
          deviceSelect.appendChild(option);
        }

        // Reemplazar la tabla existente con la nueva
        devicesTable.parentNode.replaceChild(tbody, devicesTable);
      });

      // Agregar nuevos logs conforme se reciben
      socket.on('log', function (message) {
        addLogMessage(message);
      });

      socket.on('logs', function (logs) {
        logsDiv.innerHTML = "";
        if (logs.length === 0) {
          logsDiv.innerHTML = `
            <div class="h-full flex flex-col items-center justify-center text-gray-500">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10 mb-2 opacity-20" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <polyline points="4 17 10 11 4 5"></polyline>
                <line x1="12" y1="19" x2="20" y2="19"></line>
              </svg>
              <p>No hay logs para mostrar</p>
              <p class="text-sm">Los logs de los dispositivos aparecerán aquí</p>
            </div>
          `;
        } else {
          logs.forEach(function (log) {
            addLogMessage(log);
          });
        }
      });

      function addLogMessage(message) {
        // Si es el primer log, limpiar el mensaje de "no hay logs"
        if (logsDiv.querySelector('.flex.flex-col.items-center.justify-center')) {
          logsDiv.innerHTML = "";
        }

        let logClass = "text-gray-800";
        if (message.toLowerCase().includes("error") || message.toLowerCase().includes("failed") || message.toLowerCase().includes("exception")) {
          logClass = "text-red-500";
        } else if (message.toLowerCase().includes("warning") || message.toLowerCase().includes("warn")) {
          logClass = "text-yellow-500";
        } else if (message.toLowerCase().includes("success") || message.toLowerCase().includes("connected")) {
          logClass = "text-green-500";
        }

        const timestamp = new Date().toLocaleTimeString();
        const logEntry = document.createElement('div');
        logEntry.className = `log-entry ${logClass}`;
        logEntry.innerHTML = `
          <span class="text-gray-500 mr-2">[${timestamp}]</span>
          ${message}
        `;

        logsDiv.appendChild(logEntry);
        logsDiv.scrollTop = logsDiv.scrollHeight;
      }

      // Manejar la presentación del archivo seleccionado
      firmwareFile.addEventListener('change', function () {
        if (this.files && this.files.length > 0) {
          const file = this.files[0];
          fileDropArea.classList.add('hidden');
          selectedFileInfo.classList.remove('hidden');
          fileName.textContent = file.name;
          fileSize.textContent = `${(file.size / 1024).toFixed(2)} KB`;
        }
      });

      // Mostrar pista de actualización según la selección del dispositivo
      deviceSelect.addEventListener('change', function () {
        if (this.value === 'all') {
          updateHint.textContent = 'La actualización se aplicará a todos los dispositivos en línea. Los dispositivos fuera de línea se actualizarán cuando se vuelvan a conectar.';
        } else {
          const selectedOption = this.options[this.selectedIndex];
          const deviceName = selectedOption.textContent.split(' - ')[1];
          updateHint.textContent = `La actualización se aplicará al dispositivo ${deviceName}.`;
        }
      });

      // Manejar el submit del formulario de firmware vía AJAX
      firmwareForm.addEventListener('submit', function (e) {
        e.preventDefault();

        if (!firmwareFile.files || firmwareFile.files.length === 0) {
          addLogMessage("Error: Por favor seleccione un archivo de firmware (.bin)");
          return;
        }

        updateButton.classList.add('hidden');
        uploadingIndicator.classList.remove('hidden');
        uploadingIndicator.classList.add('flex');

        const formData = new FormData(firmwareForm);

        fetch('/update-firmware', {
          method: 'POST',
          body: formData
        })
          .then(response => response.text())
          .then(result => {
            addLogMessage(`Respuesta del servidor: ${result}`);
            updateButton.classList.remove('hidden');
            uploadingIndicator.classList.add('hidden');
            uploadingIndicator.classList.remove('flex');

            // Notificación de éxito
            showToast('Actualización iniciada', 'La actualización de firmware ha sido iniciada correctamente.', 'success');

            // Limpiar el formulario
            fileDropArea.classList.remove('hidden');
            selectedFileInfo.classList.add('hidden');
            firmwareForm.reset();
          })
          .catch(error => {
            addLogMessage(`Error al enviar firmware: ${error}`);
            updateButton.classList.remove('hidden');
            uploadingIndicator.classList.add('hidden');
            uploadingIndicator.classList.remove('flex');

            // Notificación de error
            showToast('Error', `No se pudo iniciar la actualización: ${error}`, 'error');
          });
      });

      // Copiar logs al portapapeles
      copyLogsBtn.addEventListener('click', function () {
        const logTexts = Array.from(logsDiv.querySelectorAll('.log-entry'))
          .map(entry => entry.textContent.trim())
          .join('\n');

        if (logTexts.length === 0) {
          showToast('Información', 'No hay logs para copiar', 'info');
          return;
        }

        navigator.clipboard.writeText(logTexts).then(
          function () {
            showToast('Copiado', 'Logs copiados al portapapeles', 'success');
          },
          function (err) {
            showToast('Error', 'No se pudieron copiar los logs', 'error');
          }
        );
      });

      // Limpiar logs
      clearLogsBtn.addEventListener('click', function () {
        socket.emit('clearLogs');
        logsDiv.innerHTML = `
          <div class="h-full flex flex-col items-center justify-center text-gray-500">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10 mb-2 opacity-20" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <polyline points="4 17 10 11 4 5"></polyline>
              <line x1="12" y1="19" x2="20" y2="19"></line>
            </svg>
            <p>No hay logs para mostrar</p>
            <p class="text-sm">Los logs de los dispositivos aparecerán aquí</p>
          </div>
        `;
        showToast('Limpieza', 'Logs limpiados correctamente', 'success');
      });

      // Función para mostrar notificaciones toast
      function showToast(title, message, type) {
        const toast = document.createElement('div');
        toast.className = `fixed top-4 right-4 z-50 flex items-center p-4 mb-4 max-w-xs text-gray-500 bg-white rounded-lg shadow transform transition-all duration-300 ease-out ${type === 'success' ? 'border-l-4 border-green-500' :
          type === 'error' ? 'border-l-4 border-red-500' :
            type === 'warning' ? 'border-l-4 border-yellow-500' :
              'border-l-4 border-blue-500'
          }`;

        toast.innerHTML = `
          <div class="inline-flex flex-shrink-0 justify-center items-center w-8 h-8 ${type === 'success' ? 'text-green-500' :
            type === 'error' ? 'text-red-500' :
              type === 'warning' ? 'text-yellow-500' :
                'text-blue-500'
          }">
            ${type === 'success' ?
            '<svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path><polyline points="22 4 12 14.01 9 11.01"></polyline></svg>' :
            type === 'error' ?
              '<svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line></svg>' :
              type === 'warning' ?
                '<svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"></path><line x1="12" y1="9" x2="12" y2="13"></line><line x1="12" y1="17" x2="12.01" y2="17"></line></svg>' :
                '<svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg>'
          }
          </div>
          <div class="ml-3 text-sm font-normal">
            <span class="mb-1 text-sm font-semibold text-gray-900">${title}</span>
            <div class="mb-2 text-sm font-normal">${message}</div>
          </div>
          <button type="button" class="ml-auto -mx-1.5 -my-1.5 bg-white text-gray-400 hover:text-gray-900 rounded-lg focus:ring-2 focus:ring-gray-300 p-1.5 inline-flex h-8 w-8" onclick="this.parentElement.remove()">
            <svg class="w-5 h-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <line x1="18" y1="6" x2="6" y2="18"></line>
              <line x1="6" y1="6" x2="18" y2="18"></line>
            </svg>
          </button>
        `;

        document.body.appendChild(toast);

        // Auto eliminar después de 5 segundos
        setTimeout(() => {
          toast.classList.add('opacity-0', 'translate-y-2');
          setTimeout(() => {
            toast.remove();
          }, 300);
        }, 5000);
      }

      // Soporte para drag and drop en el área de archivos
      ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        fileDropArea.addEventListener(eventName, preventDefaults, false);
      });

      function preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
      }

      ['dragenter', 'dragover'].forEach(eventName => {
        fileDropArea.addEventListener(eventName, highlight, false);
      });

      ['dragleave', 'drop'].forEach(eventName => {
        fileDropArea.addEventListener(eventName, unhighlight, false);
      });

      function highlight() {
        fileDropArea.classList.add('bg-gray-50', 'border-purple-300');
      }

      function unhighlight() {
        fileDropArea.classList.remove('bg-gray-50', 'border-purple-300');
      }

      fileDropArea.addEventListener('drop', handleDrop, false);

      function handleDrop(e) {
        const dt = e.dataTransfer;
        const files = dt.files;

        if (files && files.length > 0) {
          firmwareFile.files = files;

          // Trigger change event manually
          const event = new Event('change');
          firmwareFile.dispatchEvent(event);
        }
      }
    });
  </script>
</body>

</html>